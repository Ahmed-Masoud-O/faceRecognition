from PIL import Image
import numpy as np
from numpy import transpose as TS
folder_index = 0


def get_path(iteration):
    global folder_index
    mod = iteration % 10
    if mod == 0:
        folder_index += 1
    return 'orl_faces/s' + str(folder_index) + '/' + str(mod+1) + '.pgm'

im = Image.open(get_path(0))
data_matrix = list(im.getdata())
labels = [1]
for i in range(1, 400):
    im = Image.open(get_path(i))
    pixels = list(im.getdata())
    # print(pixels)
    data_matrix = np.c_[data_matrix, pixels]
    labels.append(folder_index)
data_matrix = data_matrix.transpose()
print(data_matrix)
print(data_matrix.shape)
print(labels)
testing_data = data_matrix[0]
training_data = data_matrix[1]

for i in range(2, 400):
    if i % 2 == 0:
        testing_data = np.c_[data_matrix[i], testing_data]
    else:
        training_data = np.c_[data_matrix[i], training_data]
testing_data = testing_data.transpose()
training_data = training_data.transpose()
print(testing_data)
print(testing_data.shape)
print("-------")
print(training_data)
print(training_data.shape)

print("------------\n Mean \n------------")
meanVector = np.mean(training_data, 0)
print(meanVector)

centeredMatrix = training_data - meanVector
print("----------------\n Centered Matrix \n----------------")
print(centeredMatrix)

print("----------------- \nCovariance Matrix \n-----------------")
covarianceMatrix = np.dot(TS(centeredMatrix), centeredMatrix)*1/200
print(covarianceMatrix)
print(covarianceMatrix.shape)

eigens = np.linalg.eigh(covarianceMatrix)
eigenValues = eigens[0]
eigenVector = eigens[1]
print("--------------- \n eigen values \n --------------")
print(np.diag(eigenValues))
print("--------------- \n eigen Vectors \n --------------")
print(np.matrix(eigenVector))




